package rait

import (
	"io/ioutil"
	"os"
	"os/exec"
	"strconv"
	"text/template"
)

const BabeldConfigTemplate = `# Generated by rait up
export-table 254
default type tunnel link-quality true max-rtt-penalty 1024 rtt-max 1024
default split-horizon false hello-interval 20 rxcost 32
{{$prefix := .IFPrefix}}
interface {{$prefix}}local type wired
{{range .IFSuffix}}interface {{$prefix}}{{.}}
{{end}}
redistribute local deny
`

func GenerateBabeldConfig(IFPrefix string, n int) (string, error) {
	var IFSuffix []string
	for i := 0; i < n; i++ {
		IFSuffix = append(IFSuffix, strconv.Itoa(i))
	}
	tmpl, err := template.New("babeld.conf").Parse(BabeldConfigTemplate)
	if err != nil {
		return "", err
	}
	tmpfile, err := ioutil.TempFile("", "babeld.conf.*")
	if err != nil {
		return "", err
	}
	defer tmpfile.Close()
	err = tmpl.Execute(tmpfile, struct {
		IFPrefix string
		IFSuffix []string
	}{
		IFPrefix: IFPrefix,
		IFSuffix: IFSuffix,
	})
	if err != nil {
		return "", err
	}
	return tmpfile.Name(), nil
}

func ExecuteBabeld(IFPrefix string, n int, ns string) error {
	babeldConfig, err := GenerateBabeldConfig(IFPrefix, n)
	if err != nil {
		return err
	}
	cmd := exec.Command("ip", "netns", "exec", ns, "babeld", "-c", babeldConfig, "-I", "''")
	cmd.Stdout = os.Stdout
	return cmd.Run()
}
