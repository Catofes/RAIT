package rait

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"strconv"
	"text/template"
)

var BabeldTemplate = `# Generated by rait
export-table 254

default type tunnel link-quality true max-rtt-penalty 1024 rtt-max 1024
default split-horizon false hello-interval 20 rxcost 32

{{range .IFNames}}interface {{.}}
{{end}}
redistribute local deny
`

func (r *RAIT) WriteBabeldConfig(n int) error {
	tmpl, err := template.New("babeld.conf").Parse(BabeldTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}
	var data bytes.Buffer
	var ifnames []string
	ifnames = append(ifnames, IFPrefix+"local")
	for i := 0; i < n; i++ {
		ifnames = append(ifnames, IFPrefix+strconv.Itoa(i))
	}
	err = tmpl.Execute(&data, struct {
		IFNames []string
	}{
		IFNames: ifnames,
	})
	if err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}
	err = ioutil.WriteFile("/var/run/babeld.rait.conf",data.Bytes(),0644)
	if err != nil {
		return fmt.Errorf("failed to write file: %w", err)
	}
	return nil
}
